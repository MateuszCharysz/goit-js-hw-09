{"mappings":"gfAAAA,EAAA,SAKA,IAAMC,EAAMC,QAAQC,IAOdC,EAAOC,SAASC,cAAc,SACpCC,EAEIH,EADFI,SAAYC,EAAKF,EAALG,MAAOC,EAAIJ,EAAJK,KAAMC,EAAMN,EAANO,OAE3Bb,EAAIQ,GACJR,EAAIU,GACJV,EAAIY,GAgCJT,EAAKW,iBAAiB,UAAU,SAAAC,GA7BV,IAACC,EAAOC,EAAMC,EACXC,EAAUC,EACzBC,EAUFC,EAkBNP,EAAMQ,iBA9BeP,EAiCPR,EAAMgB,cAjCQP,EAiCOP,EAAKc,cAjCNN,EAiCqBN,EAAOY,cArBxDF,EAAaG,aAVXJ,EAAgBK,KAAKC,SAAW,GACtC,IAAIC,SAAQ,SAACC,EAASC,GAChBT,EACFQ,EAAQ,CAAEV,SAAU,GAAYY,OAATZ,GAAYa,KAAM,GAAeD,OAAZX,KAE5CU,EAAO,CAAEX,SAAU,GAAYY,OAATZ,GAAYa,KAAM,GAAeD,OAAZX,I,SAG3CF,IAASC,GAAUc,cAAcX,KAESL,GAChDiB,WAAWZ,EAAYN,E","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\nimport Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\n//help\nconst log = console.log;\n\n//DOM\n// const delay = document.querySelector('[name=\"delay\"]')\n// log(delay)\n// const step = document.querySelector('[name=\"step\"]');\n// const amount = document.querySelector('[name=\"amount\"]');\nconst form = document.querySelector('.form');\nconst {\n  elements: { delay, step, amount },\n} = form;\nlog(delay);\nlog(step);\nlog(amount);\n//CALLBACK/FUNCTIONS\n\nconst promiseLoader = (delay, step, amount) => {\n  const createPromise = (position, timeOfLunch) => {\n    const shouldResolve = Math.random() > 0.3;\n    new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({ position: `${position}`, time: `${timeOfLunch}` }); // Fulfill\n      } else {\n        reject({ position: `${position}`, time: `${timeOfLunch}` }); // Reject\n      }\n    })\n    if (amount===position) clearInterval(intervalId);\n  };\n  const intervalId = setInterval(createPromise(), step);\n  setTimeout(intervalId, delay)\n\n\n\n  \n  // .then(() =>\n  //   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`),\n  // )\n  // .catch(() =>\n  //   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`),\n  // );\n};\n// Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\n//EVENTS\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  // log(delay.value, step.value, amount.value) // it works\n  // log(typeof delay.value); valueAsNumber\n  promiseLoader(delay.valueAsNumber, step.valueAsNumber, amount.valueAsNumber);\n});\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$log","console","log","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","addEventListener","event","delay1","step1","amount1","position","timeOfLunch","shouldResolve","intervalId","preventDefault","valueAsNumber","setInterval","Math","random","Promise","resolve","reject","concat","time","clearInterval","setTimeout"],"version":3,"file":"03-promises.72700675.js.map"}